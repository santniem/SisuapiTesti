// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Paska.Models;
//
//    var module = Module.FromJson(jsonString);

namespace Paska.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Module
    {
        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        [JsonProperty("documentState")]
        public string DocumentState { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("universityOrgIds")]
        public List<string> UniversityOrgIds { get; set; }

        [JsonProperty("groupId")]
        public string GroupId { get; set; }

        [JsonProperty("name")]
        public Name Name { get; set; }

        [JsonProperty("moduleContentApprovalRequired")]
        public bool ModuleContentApprovalRequired { get; set; }

        [JsonProperty("code")]
        public string Code { get; set; }


        [JsonProperty("curriculumPeriodIds")]
        public List<string> CurriculumPeriodIds { get; set; }

        [JsonProperty("approvalState")]
        public string ApprovalState { get; set; }

        [JsonProperty("validityPeriod")]
        public ModuleValidityPeriod ValidityPeriod { get; set; }

        [JsonProperty("contentDescription")]
        public ContentDescription ContentDescription { get; set; }

        [JsonProperty("additionalInfo")]
        public object AdditionalInfo { get; set; }

        [JsonProperty("responsibilityInfos")]
        public List<ResponsibilityInfo> ResponsibilityInfos { get; set; }

        [JsonProperty("organisations")]
        public List<Organisation> Organisations { get; set; }

        [JsonProperty("inclusionApplicationInstruction")]
        public object InclusionApplicationInstruction { get; set; }

        [JsonProperty("tweetText")]
        public object TweetText { get; set; }

        [JsonProperty("degreeProgramTypeUrn")]
        public string DegreeProgramTypeUrn { get; set; }

        [JsonProperty("degreeTitleUrns")]
        public List<string> DegreeTitleUrns { get; set; }

        [JsonProperty("degreeLanguageUrns")]
        public List<string> DegreeLanguageUrns { get; set; }

        [JsonProperty("studyFields")]
        public List<string> StudyFields { get; set; }

        [JsonProperty("educationClassificationUrns")]
        public List<string> EducationClassificationUrns { get; set; }

        [JsonProperty("educationLocationUrns")]
        public List<string> EducationLocationUrns { get; set; }

        [JsonProperty("gradeScaleId")]
        public string GradeScaleId { get; set; }

        [JsonProperty("customCodeUrns")]
        public CustomCodeUrns CustomCodeUrns { get; set; }

        [JsonProperty("learningOutcomes")]
        public ContentDescription LearningOutcomes { get; set; }

        [JsonProperty("tuitionFee")]
        public object TuitionFee { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("rule")]
        public Rule Rule { get; set; }
    }

    public partial class Rule
    {
        public string type { get; set; }

        public string? localId { get; set; }
        public string moduleGroupId { get; set; }

        public Rule? rule { get; set; }

        public List<Rule>? rules { get; set; }
    }




    public partial class ContentDescription
    {
        [JsonProperty("fi")]
        public string Fi { get; set; }
    }

    public partial class CustomCodeUrns
    {
        [JsonProperty("urn:code:custom:tuni-university-root-id:degree-programmes")]
        public List<string> UrnCodeCustomTuniUniversityRootIdDegreeProgrammes { get; set; }

        [JsonProperty("urn:code:custom:tuni-university-root-id:offering-location")]
        public List<string> UrnCodeCustomTuniUniversityRootIdOfferingLocation { get; set; }
    }

    public partial class Metadata
    {
        [JsonProperty("revision")]
        public long Revision { get; set; }

        [JsonProperty("createdBy")]
        public string CreatedBy { get; set; }

        [JsonProperty("createdOn")]
        public DateTimeOffset CreatedOn { get; set; }

        [JsonProperty("lastModifiedBy")]
        public string LastModifiedBy { get; set; }

        [JsonProperty("lastModifiedOn")]
        public DateTimeOffset LastModifiedOn { get; set; }

        [JsonProperty("modificationOrdinal")]
        public long ModificationOrdinal { get; set; }
    }

    public partial class Name
    {
        [JsonProperty("en")]
        public string En { get; set; }

        [JsonProperty("fi")]
        public string Fi { get; set; }
    }

    public partial class Organisation
    {
        [JsonProperty("organisationId")]
        public string OrganisationId { get; set; }

        [JsonProperty("educationalInstitutionUrn")]
        public object EducationalInstitutionUrn { get; set; }

        [JsonProperty("roleUrn")]
        public string RoleUrn { get; set; }

        [JsonProperty("share")]
        public long Share { get; set; }

        [JsonProperty("validityPeriod")]
        public OrganisationValidityPeriod ValidityPeriod { get; set; }
    }

    public partial class OrganisationValidityPeriod
    {
    }

    public partial class ResponsibilityInfo
    {
        [JsonProperty("text")]
        public ContentDescription Text { get; set; }

        [JsonProperty("personId")]
        public string PersonId { get; set; }

        [JsonProperty("roleUrn")]
        public string RoleUrn { get; set; }

        [JsonProperty("validityPeriod")]
        public ResponsibilityInfoValidityPeriod ValidityPeriod { get; set; }
    }

    public partial class ResponsibilityInfoValidityPeriod
    {
        [JsonProperty("endDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? EndDate { get; set; }
    }


 

    public partial class Module
    {
        List<string> GroupIds;
        public string[] getSubModules(Rule rootRule)
        {
            GroupIds = new List<string>();
            return SubModules(rootRule);
        }

        private string[] SubModules(Rule rootRule)
        {
            
            if(rootRule.moduleGroupId != null && rootRule.type == "ModuleRule")
            {
                GroupIds.Add(rootRule.moduleGroupId);
            }

            if (rootRule.rules != null)
            {
                foreach (var r in rootRule.rules)
                {
                    SubModules(r);
                }
            }
            if (rootRule.rule != null)
            {
                SubModules(rootRule.rule);
            }
            return GroupIds.ToArray();
        }
    }


    public partial class ModuleValidityPeriod
    {
        [JsonProperty("startDate")]
        public DateTimeOffset StartDate { get; set; }
    }

    public partial class Module
    {
        public static Module FromJson(string json) => JsonConvert.DeserializeObject<Module>(json, Paska.Models.Converter.Settings);
    }
    public partial class Module
    {
        public static Module FromJsonList(string json) => JsonConvert.DeserializeObject<Module[]>(json, Paska.Models.Converter.Settings)[0];
    }
    public static class Serialize
    {
        public static string ToJson(this Module self) => JsonConvert.SerializeObject(self, Paska.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
